<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[tsettest]]></title>
    <url>%2Fpassages%2F2019%2F03%2F12---tsettest%2F</url>
    <content type="text"><![CDATA[没有提供参数，则只输出普通的 blockquoteLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem. 引用书上的句子 Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy. David LevithanWide Awake]]></content>
      <tags>
        <tag>mac</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里云服务器上搭建seafile专业版]]></title>
    <url>%2Fpassages%2F2019%2F03%2F07---%E9%98%BF%E9%87%8C%E4%BA%91seafile-%E4%B8%93%E4%B8%9A%E7%89%88%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[因为官方一键安装教程在阿里云服务器上无法安装，由于水平有限，无法解决，所以选择手动安装 参考资料： 1,、腾讯云搭建seafile服务器 2、How to Install Seafile with Nginx on CentOS 7 先将防火墙关闭 systemctl stop firewalld.service #停止firewall 一.部署环境云服务器：阿里云 1vCPU 1GB ecs.xn4.small 100Mbps centos 7.4 64位 环境安装： yum update yum install -y tree vim 部署mysql5.7 下载mysql源安装包 wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm 安装mysql源 yum localinstall -y mysql57-community-release-el7-8.noarch.rpm 检查mysql源是否安装成功 yum repolist enabled | grep &quot;mysql.*-community.*&quot; 安装mysql yum install -y mysql-community-server 启动mysql服务 systemctl start mysqld 设置开机启动 systemctl enable mysqld systemctl daemon-reload 修改root本地登录密码 #查看root默认密码 grep &apos;temporary password&apos; /var/log/mysqld.log #修改root密码 mysql -uroot -p set password for &apos;root&apos;@&apos;localhost&apos;=password(&apos;密码&apos;); 注意：mysql5.7默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于8位。否则会提示ERROR 1819 (HY000): Your password does not satisfy the current policy requirements错误。 重新启动mysql服务使配置生效： systemctl restart mysqld 打开远程登录和配置默认编码utf8 mysql&gt;grant all privileges on *.* to &apos;root&apos;@&apos;%&apos; identified by &apos;密码&apos; with grant option; mysql&gt;FLUSH PRIVILEGES; 修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示： [mysqld] character_set_server=utf8 init_connect=&apos;SET NAMES utf8&apos; 3.部署nginx 1.12.2 yum install -y openssl-devel pcre-devel epel-release yum install -y nginx 启动nginx systemctl start nginx 4.部署python关联包 按照seafile官方手册安装如下：123456# yum -y install epel-release# rpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro# yum -y install python-imaging MySQL-python python-memcached python-ldap python-urllib3 ffmpeg ffmpeg-devel# pip install pillow moviepy #这步提示错误，没有pip，然后# yum -y install python-pip 和 # pip install --upgrade pip 仍然报错，然后# pip install setuptools==33.1.1 后再安装pillow成功。 5.部署jre yum install jre 二.部署seafile1.目录设计，将seafile专业版安装包下载到/opt目录下12345mkdir -p /opt/seafile/installedmv /opt/seafile-pro-server_* /opt/seafilecd /opt/seafiletar -xzf seafile-pro-server_*mv seafile-pro-server_* installed 2.部署seafilecd seafile-pro-server-* ./setup-seafile-mysql.sh #运行安装脚本并回答预设问题 参数 作用 说明 seafile server name seafile 服务器的名字，目前该配置已经不再使用 3 ~ 15 个字符，可以用英文字母，数字，下划线 seafile server ip or domain seafile 服务器的 IP 地址或者域名 客户端将通过这个 IP 或者地址来访问你的 Seafile 服务 seafile data dir seafile 数据存放的目录，用上面的例子，默认将是/data/haiwen/seafile-data seafile 数据将随着使用而逐渐增加，请把它放在一个有足够大空闲空间的分区上 seafile fileserver port seafile fileserver 使用的 TCP 端口 该端口用于文件同步，请使用默认的 8082，不能更改。 在这里, 你会被要求选择一种创建 Seafile 数据库的方式: ------------------------------------------------------- Please choose a way to initialize seafile databases: ------------------------------------------------------- [1] Create new ccnet/seafile/seahub databases [2] Use existing ccnet/seafile/seahub databases 如果选择1, 你需要提供根密码. 脚本程序会创建数据库和用户。 如果选择2, ccnet/seafile/seahub 数据库应该已经被你（或者其他人）提前创建。 3.配置 Seafile和Seahub服务Next, go to the systemd directory and create a seafile.service file with vim: cd /etc/systemd/system/ vim seafile.service Paste seafile service configuration below:123456789101112131415[Unit]Description=Seafile ServerBefore=seahub.serviceAfter=network.target mariadb.service[Service]Type=oneshotExecStart=/opt/seafile/seafile-server-latest/seafile.sh startExecStop=/opt/seafile/seafile-server-latest/seafile.sh stopRemainAfterExit=yesUser=rootGroup=root[Install]WantedBy=multi-user.target Now create new seahub.service file. vim seahub.service And paste configuration below.1234567891011121314[Unit]Description=Seafile HubAfter=network.target seafile.target mariadb.service[Service]Type=oneshotExecStart=/opt/seafile/seafile-server-latest/seahub.sh startExecStop=/opt/seafile/seafile-server-latest/seahub.sh stopRemainAfterExit=yesUser=rootGroup=root[Install]WantedBy=multi-user.target Reload the systemd service and start seafile and seahub with systemctl. systemctl daemon-reload systemctl start seafile systemctl start seahub Make sure there is no error and check that the seafile and seahub service is running on port 8082 and 8000. netstat -plntu Start seafile and Seahub service 4.创建ssl证书 Create the ssl directory. mkdir -p /etc/nginx/ssl cd /etc/nginx/ssl Generate self signed certificate files and a dhparam file with command below: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048 openssl req -new -x509 -sha256 -days 365 -newkey rsa:2048 -nodes -keyout server.key -out server.crt ps:如果没有证书，可以使用上面的命令根据步骤生成一个 5.Nginx下配置Seahub In this step, we will configure Nginx as a reverse proxy for the seafile-server on port 8000 and 8002. Go to the nginx configuration directory and create a new virtual host file for seafile. cd /etc/nginx/ 备份原有的配置nginx.conf为nginx.conf.backup mv nginx.conf nginx.conf.backup vim nginx.conf 编辑nginx.conf内容123456789101112131415161718192021222324252627282930313233343536373839404142user nginx nginx;worker_processes 4;events &#123; worker_connections 8096; multi_accept on; use epoll;&#125;pid /var/run/nginx.pid;worker_rlimit_nofile 40000;http &#123; server_tokens off; server_names_hash_bucket_size 128; client_max_body_size 50M; include /etc/nginx/mime.types; default_type application/octet-stream; log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; access_log /var/log/nginx/access.log main; error_log /var/log/nginx/error.log warn; sendfile on; tcp_nopush on; tcp_nodelay on; client_body_timeout 12; client_header_timeout 12; keepalive_timeout 15; send_timeout 10; # Fully disabled gzip compression to mitigate Django BREACH attack: https://www.djangoproject.com/weblog/2013/aug/06/breach-and-django/ gzip off; #gzip_vary on; #gzip_proxied expired no-cache no-store private auth any; #gzip_comp_level 9; #gzip_min_length 10240; #gzip_buffers 16 8k; #gzip_http_version 1.1; #gzip_types text/plain text/css text/xml text/javascript application/javascript application/x-javascript application/xml font/woff2; #gzip_disable &quot;MSIE [1-6].&quot;; include /etc/nginx/conf.d/*.conf;&#125; vim conf.d/seafile.conf Paste virtual host configuration below:1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283server &#123; listen 80; server_name fz419.cn; rewrite ^ https://$http_host$request_uri? permanent; #强制将http重定向到https server_tokens off;&#125;server &#123; listen 443; ssl on; ssl_certificate /etc/nginx/ssl/@fz419.cn.pem; ssl_certificate_key /etc/nginx/ssl/@fz419.cn.key; server_name fz419.cn; ssl_session_timeout 5m; ssl_session_cache shared:SSL:5m; # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits ssl_dhparam /etc/nginx/ssl/dhparam.pem; # secure settings (A+ at SSL Labs ssltest at time of writing) # see https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers &apos;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-CAMELLIA256-SHA:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-SEED-SHA:DHE-RSA-CAMELLIA128-SHA:HIGH:!aNULL:!eNULL:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS&apos;; ssl_prefer_server_ciphers on; proxy_set_header X-Forwarded-For $remote_addr; add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;; server_tokens off; location / &#123; proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Forwarded-Proto https; access_log /var/log/nginx/seahub.access.log; error_log /var/log/nginx/seahub.error.log; proxy_read_timeout 1200s; client_max_body_size 0; &#125;# 如果你使用 fastcgi 请使用此配置## location / &#123;# fastcgi_pass 127.0.0.1:8000;# fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;# fastcgi_param PATH_INFO $fastcgi_script_name;## fastcgi_param SERVER_PROTOCOL $server_protocol;# fastcgi_param QUERY_STRING $query_string;# fastcgi_param REQUEST_METHOD $request_method;# fastcgi_param CONTENT_TYPE $content_type;# fastcgi_param CONTENT_LENGTH $content_length;# fastcgi_param SERVER_ADDR $server_addr;# fastcgi_param SERVER_PORT $server_port;# fastcgi_param SERVER_NAME $server_name;# fastcgi_param REMOTE_ADDR $remote_addr;# fastcgi_read_timeout 36000;## client_max_body_size 0;## access_log /var/log/nginx/seahub.access.log;# error_log /var/log/nginx/seahub.error.log;# &#125; location /seafhttp &#123; rewrite ^/seafhttp(.*)$ $1 break; proxy_pass http://127.0.0.1:8082; client_max_body_size 0; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 36000s; proxy_read_timeout 36000s; proxy_send_timeout 36000s; send_timeout 36000s; &#125; location /media &#123; root /opt/seafile/seafile-server-latest/seahub; &#125;&#125; Save and exit. I will use use ‘cloud.natsume.co’ as the domain name. Please replace that with your own domain name in the config above. Now test the Nginx configuration and make sure that there are no errors. nginx -t Start Nginx with the systemctl command: systemctl start nginx Make sure port 80 and 443 are available in the list that netstat provides: netstat -plntu Check that Nginx is listening on the port 80 Next, we have to add the domain name to the seafile configuration. Go to the seafile directory and edit the configuration file. cd /opt/seafile/ vim conf/ccnet.conf Change the service URL to your domain name. SERVICE_URL = https://fz419.cn Save and exit. Edit the seahub configuration file. vim conf/seahub_settings.py On the second line, add configuration below: HTTP_SERVER_ROOT = &apos;https://fz419.cn/seafhttp&apos; Replace the domain name with your domain here again. Save and exit. Restart seafile and add all services to start at boot time: systemctl restart seafile systemctl restart seahub systemctl enable nginx systemctl enable mysqld systemctl enable seafile systemctl enable seahub 6.配置防火墙 Start firewalld. systemctl start firewalld systemctl enable firewalld Add HTTP and HTTPS port to the firewall configuration with the firewall-cmd command below: firewall-cmd --zone=public --add-port=80/tcp --permanent firewall-cmd --zone=public --add-port=443/tcp --permanent Reload the firewall configuration and check the port list. firewall-cmd --reload firewall-cmd --list-all 打开TCP的80和443端口即可。 三.配置office在线预览功能1.安装 Libreoffice/UNO sudo yum install libreoffice libreoffice-headless libreoffice-pyuno poppler-utils 2.安装字体 sudo yum install wqy-microhei-fonts wqy-zenhei-fonts wqy-unibit-fonts -y 3.开启配置项 打开 conf/seafevents.conf, 添加:[OFFICE CONVERTER] enabled = true 保存后 seafevents.conf 重启 Seafile 服务 ./seafile.sh restart]]></content>
      <tags>
        <tag>mac</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac上搭建基于GitHub的Hexo博客]]></title>
    <url>%2Fpassages%2F2019%2F03%2F07---Hexo%20installed%20to%20mac%2F</url>
    <content type="text"><![CDATA[一、准备工作 Mac电脑一台 Github账号 Hexo需要的环境 Git node.js 二：安装环境以下命令均在终端上操作 安装 Command Line Tools （命令行工具）有两种方式可以选择（推荐第二种） 方式1：在App Store中安装Xcode，安装完Xcode之后将会自动安装Command Line Tools 方式2：在终端中输入gcc，如未安装Command Line Tools将会提示安装，如下提示，点击安装即可 1、安装Brew（Mac下的包管理器）官方的介绍是：MacOS 缺失的软件包的管理器​我们将会用它来安装Git和Node.js 官网地址 安装命令如下：（请到官网确认命令是否更新）1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 中间会提示输入密码和输入回车 2、安装Git和Node.js用Brew安装最新的Git和Node.js软件，命令如下：1brew install git node 安装hexo-cli，这是Hexo的命令行工具1npm install -g hexo-cli # -g为全局安装 我这里遇到了使用npm的无权限的问题，解决方法 初始化hexo123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 测试hexo服务器1hexo server 成功开启服务器之后就可以在本地的http://localhost:4000访问hexo了 3.部署到github pages 上配置git用户名和邮箱，将下面的名字和用户名换成自己的12git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;Your Mail&quot; 在当前用户中生成一个ssh密钥，一直回车即可 ssh-keygen -t rsa -C 769102532@qq.com 查看ssh公匙，并上传到github上。1cat ~/.ssh/id_rsa.pub 编辑下面配置，将自己deploy配置写到配置文件中，其中用户名（lauguangjie）换成自己的。1vim _config.yml 1234deploy: type: git repo: git@github.com:lauguangjie/lauguangjie.github.io.git branch: master 12345hexo cleanhero ghexo d 1npm install hexo-deployer-git --save 1hexo d 1touch ~/hexo/source/CNAME lauguangjie.com 12hexo ghexo d]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>
